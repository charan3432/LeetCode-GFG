class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {

        if(nums1.length==0 || nums2.length==0) {
            return new int[0];
        }

        Map<Integer, Integer> nge = new HashMap<>();
        Stack<Integer> stack = new Stack<>();
        int n2 = nums2.length;
        nge.put(nums2[n2-1],-1);
        stack.push(nums2[n2-1]);

        for(int i=n2-2;i>=0;i--) {
            if(nums2[i] < stack.peek()) {
                nge.put(nums2[i],stack.peek());
                stack.push(nums2[i]);
                continue;
            }

            while(!stack.isEmpty() && nums2[i] > stack.peek()) {
                stack.pop();
            }
            if(stack.isEmpty()) {
                stack.push(nums2[i]);
                nge.put(nums2[i], -1);
            }
            else {
                nge.put(nums2[i], stack.peek());
                stack.push(nums2[i]);
            }
        }
        for(int i=0;i<nums1.length;i++) {
            nums1[i] = nge.get(nums1[i]);
        }

        return nums1;
    }
}
